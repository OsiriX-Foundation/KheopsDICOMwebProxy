plugins {
  id "org.sonarqube" version "2.6.2"
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: "jacoco"
apply from: 'https://raw.github.com/gretty-gradle-plugin/gretty/master/pluginScripts/gretty.plugin'

// Enable debugging of gretty started webapp in IDEA
// For debugging a gradle task, IDEA creates a gradle init script (in /tmp/ijinit#.gradle), that sets JVM arguments
// to enable remote debugging.
// Unfortunately by default that only works for gradle tasks that implement JavaForkOptions - which gretty doesn't do.
// So parse the JVM args that IDEA uses from that init script and set them as JVM args to be used by gretty:
def debugArgs = []
if (gradle.startParameter.initScripts) {

    def all_lines = file(gradle.startParameter.initScripts[0]).text

    def firstPattern = "setupDebugger(task.path, "
    def firstIndex = all_lines.indexOf(firstPattern)
    def debugPort = ""
    if (firstIndex > 0) {
        def secondIndex = all_lines.indexOf(")", firstIndex)
        if (secondIndex > 0) {
            debugPort = all_lines.substring(firstIndex + firstPattern.length(), secondIndex)
        }
    }

    if (!debugPort.empty) {

        def socket = null
        def stream = null
        try {
            socket = new Socket("127.0.0.1", Integer.parseInt(debugPort))
            stream = new DataOutputStream(socket.getOutputStream())
            stream.writeInt(10700)
            stream.writeUTF(":jettyStart")
            socket.getInputStream().read();
        }
        catch(Exception e) {}
        finally {
            if (socket != null) socket.close()
            if (stream != null) stream.close()
        }

        debugArgs = ["-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=10700"]
    }
}

repositories {
    mavenCentral()

    maven {
        //noinspection GroovyAssignabilityCheck
        url "https://www.dcm4che.org/maven2/"
    }
}

dependencies {
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.29.1'
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.29.1'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version: '2.29.1'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: '2.29.1'

    // Logging dependencies
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    compile 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    
    compile group: 'com.auth0', name: 'java-jwt', version: '3.4.1'

    compile (group: 'org.dcm4che', name: 'dcm4che-dcmr', version: '5.15.0') {
        exclude module: 'slf4j-log4j12'
    }
    compile (group: 'org.dcm4che', name: 'dcm4che-json', version: '5.15.0') {
        exclude module: 'slf4j-log4j12'
    }
    compile (group: 'org.dcm4che', name: 'dcm4che-mime', version: '5.15.0') {
        exclude module: 'slf4j-log4j12'
    }
    compile (group: 'org.dcm4che', name: 'dcm4che-ws-rs', version: '5.15.0') {
        exclude module: 'slf4j-log4j12'
    }
    compile (group: 'org.dcm4che', name: 'dcm4che-net', version: '5.15.0') {
        exclude module: 'slf4j-log4j12'
    }

    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.25'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
}

gretty {
    jvmArgs = [*debugArgs]

    httpPort = 7676
    contextPath = 'capabilities'
    servletContainer = 'tomcat9'
}

test {
    useJUnitPlatform()
}
